#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API.Models.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Pool")]
	public partial class API_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertanswers_to_questions(answers_to_questions instance);
    partial void Updateanswers_to_questions(answers_to_questions instance);
    partial void Deleteanswers_to_questions(answers_to_questions instance);
    partial void Insertpool_answer(pool_answer instance);
    partial void Updatepool_answer(pool_answer instance);
    partial void Deletepool_answer(pool_answer instance);
    partial void Insertpool_question(pool_question instance);
    partial void Updatepool_question(pool_question instance);
    partial void Deletepool_question(pool_question instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void Insertuser_submission(user_submission instance);
    partial void Updateuser_submission(user_submission instance);
    partial void Deleteuser_submission(user_submission instance);
    #endregion
		
		public API_DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PoolConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public API_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public API_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public API_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public API_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<answers_to_questions> answers_to_questions
		{
			get
			{
				return this.GetTable<answers_to_questions>();
			}
		}
		
		public System.Data.Linq.Table<pool_answer> pool_answer
		{
			get
			{
				return this.GetTable<pool_answer>();
			}
		}
		
		public System.Data.Linq.Table<pool_question> pool_question
		{
			get
			{
				return this.GetTable<pool_question>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<user_submission> user_submission
		{
			get
			{
				return this.GetTable<user_submission>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.answer_total", IsComposable=true)]
		public System.Nullable<int> answer_total([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> param1)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param1).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.votes_total", IsComposable=true)]
		public System.Nullable<int> votes_total([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> param1)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param1).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answers_to_questions")]
	public partial class answers_to_questions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _question_id;
		
		private int _answer_id;
		
		private EntityRef<user_submission> _user_submission;
		
		private EntityRef<pool_answer> _pool_answer;
		
		private EntityRef<pool_question> _pool_question;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onquestion_idChanging(int value);
    partial void Onquestion_idChanged();
    partial void Onanswer_idChanging(int value);
    partial void Onanswer_idChanged();
    #endregion
		
		public answers_to_questions()
		{
			this._user_submission = default(EntityRef<user_submission>);
			this._pool_answer = default(EntityRef<pool_answer>);
			this._pool_question = default(EntityRef<pool_question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int NOT NULL")]
		public int question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._pool_question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer_id", DbType="Int NOT NULL")]
		public int answer_id
		{
			get
			{
				return this._answer_id;
			}
			set
			{
				if ((this._answer_id != value))
				{
					if (this._pool_answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onanswer_idChanging(value);
					this.SendPropertyChanging();
					this._answer_id = value;
					this.SendPropertyChanged("answer_id");
					this.Onanswer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="answers_to_questions_user_submission", Storage="_user_submission", ThisKey="Id", OtherKey="answer_id", IsUnique=true, IsForeignKey=false)]
		public user_submission user_submission
		{
			get
			{
				return this._user_submission.Entity;
			}
			set
			{
				user_submission previousValue = this._user_submission.Entity;
				if (((previousValue != value) 
							|| (this._user_submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_submission.Entity = null;
						previousValue.answers_to_questions = null;
					}
					this._user_submission.Entity = value;
					if ((value != null))
					{
						value.answers_to_questions = this;
					}
					this.SendPropertyChanged("user_submission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pool_answer_answers_to_questions", Storage="_pool_answer", ThisKey="answer_id", OtherKey="answer_id", IsForeignKey=true)]
		public pool_answer pool_answer
		{
			get
			{
				return this._pool_answer.Entity;
			}
			set
			{
				pool_answer previousValue = this._pool_answer.Entity;
				if (((previousValue != value) 
							|| (this._pool_answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pool_answer.Entity = null;
						previousValue.answers_to_questions.Remove(this);
					}
					this._pool_answer.Entity = value;
					if ((value != null))
					{
						value.answers_to_questions.Add(this);
						this._answer_id = value.answer_id;
					}
					else
					{
						this._answer_id = default(int);
					}
					this.SendPropertyChanged("pool_answer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pool_question_answers_to_questions", Storage="_pool_question", ThisKey="question_id", OtherKey="question_id", IsForeignKey=true)]
		public pool_question pool_question
		{
			get
			{
				return this._pool_question.Entity;
			}
			set
			{
				pool_question previousValue = this._pool_question.Entity;
				if (((previousValue != value) 
							|| (this._pool_question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pool_question.Entity = null;
						previousValue.answers_to_questions.Remove(this);
					}
					this._pool_question.Entity = value;
					if ((value != null))
					{
						value.answers_to_questions.Add(this);
						this._question_id = value.question_id;
					}
					else
					{
						this._question_id = default(int);
					}
					this.SendPropertyChanged("pool_question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pool_answer")]
	public partial class pool_answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _answer_id;
		
		private string _text;
		
		private EntitySet<answers_to_questions> _answers_to_questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onanswer_idChanging(int value);
    partial void Onanswer_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public pool_answer()
		{
			this._answers_to_questions = new EntitySet<answers_to_questions>(new Action<answers_to_questions>(this.attach_answers_to_questions), new Action<answers_to_questions>(this.detach_answers_to_questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int answer_id
		{
			get
			{
				return this._answer_id;
			}
			set
			{
				if ((this._answer_id != value))
				{
					this.Onanswer_idChanging(value);
					this.SendPropertyChanging();
					this._answer_id = value;
					this.SendPropertyChanged("answer_id");
					this.Onanswer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(100)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pool_answer_answers_to_questions", Storage="_answers_to_questions", ThisKey="answer_id", OtherKey="answer_id")]
		public EntitySet<answers_to_questions> answers_to_questions
		{
			get
			{
				return this._answers_to_questions;
			}
			set
			{
				this._answers_to_questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answers_to_questions(answers_to_questions entity)
		{
			this.SendPropertyChanging();
			entity.pool_answer = this;
		}
		
		private void detach_answers_to_questions(answers_to_questions entity)
		{
			this.SendPropertyChanging();
			entity.pool_answer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pool_question")]
	public partial class pool_question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _question_id;
		
		private string _text;
		
		private EntitySet<answers_to_questions> _answers_to_questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onquestion_idChanging(int value);
    partial void Onquestion_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public pool_question()
		{
			this._answers_to_questions = new EntitySet<answers_to_questions>(new Action<answers_to_questions>(this.attach_answers_to_questions), new Action<answers_to_questions>(this.detach_answers_to_questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(100)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pool_question_answers_to_questions", Storage="_answers_to_questions", ThisKey="question_id", OtherKey="question_id")]
		public EntitySet<answers_to_questions> answers_to_questions
		{
			get
			{
				return this._answers_to_questions;
			}
			set
			{
				this._answers_to_questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answers_to_questions(answers_to_questions entity)
		{
			this.SendPropertyChanging();
			entity.pool_question = this;
		}
		
		private void detach_answers_to_questions(answers_to_questions entity)
		{
			this.SendPropertyChanging();
			entity.pool_question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _email;
		
		private string _password_hash;
		
		private EntitySet<user_submission> _user_submission;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onpassword_hashChanging(string value);
    partial void Onpassword_hashChanged();
    #endregion
		
		public User()
		{
			this._user_submission = new EntitySet<user_submission>(new Action<user_submission>(this.attach_user_submission), new Action<user_submission>(this.detach_user_submission));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password_hash", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string password_hash
		{
			get
			{
				return this._password_hash;
			}
			set
			{
				if ((this._password_hash != value))
				{
					this.Onpassword_hashChanging(value);
					this.SendPropertyChanging();
					this._password_hash = value;
					this.SendPropertyChanged("password_hash");
					this.Onpassword_hashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_user_submission", Storage="_user_submission", ThisKey="Id", OtherKey="user_id")]
		public EntitySet<user_submission> user_submission
		{
			get
			{
				return this._user_submission;
			}
			set
			{
				this._user_submission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_user_submission(user_submission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_user_submission(user_submission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_submission")]
	public partial class user_submission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private int _answer_id;
		
		private EntityRef<answers_to_questions> _answers_to_questions;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onanswer_idChanging(int value);
    partial void Onanswer_idChanged();
    #endregion
		
		public user_submission()
		{
			this._answers_to_questions = default(EntityRef<answers_to_questions>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int answer_id
		{
			get
			{
				return this._answer_id;
			}
			set
			{
				if ((this._answer_id != value))
				{
					if (this._answers_to_questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onanswer_idChanging(value);
					this.SendPropertyChanging();
					this._answer_id = value;
					this.SendPropertyChanged("answer_id");
					this.Onanswer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="answers_to_questions_user_submission", Storage="_answers_to_questions", ThisKey="answer_id", OtherKey="Id", IsForeignKey=true)]
		public answers_to_questions answers_to_questions
		{
			get
			{
				return this._answers_to_questions.Entity;
			}
			set
			{
				answers_to_questions previousValue = this._answers_to_questions.Entity;
				if (((previousValue != value) 
							|| (this._answers_to_questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._answers_to_questions.Entity = null;
						previousValue.user_submission = null;
					}
					this._answers_to_questions.Entity = value;
					if ((value != null))
					{
						value.user_submission = this;
						this._answer_id = value.Id;
					}
					else
					{
						this._answer_id = default(int);
					}
					this.SendPropertyChanged("answers_to_questions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_user_submission", Storage="_User", ThisKey="user_id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.user_submission.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.user_submission.Add(this);
						this._user_id = value.Id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
